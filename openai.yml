openapi: '3.0.3'
info:
  title: API Title
  version: '1.0'
servers:
  - url: http://localhost:3000
tags:
  - name: Users
    description: Gestion des utilisateurs
  - name: Reservations
    description: Gestion des réservations de terrains
  - name: Courts
    description: Gestion des terrains de badminton
  - name: Authentification
    description: Gestion de l'inscription et de la connexion des utilisateurs
  - name: Admin
    description: Gestion de l'admin
paths:
  /users:
    get:
      summary: Récupérer tous les utilisateurs
      tags: [Users]
      responses:
        200:
          description: Liste de tous les utilisateurs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: Erreur interne du serveur
  /reservations:
    post:
      summary: Créer une nouvelle réservation
      tags: [Reservations]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - courtId
                - slotId
              properties:
                courtId:
                  type: integer
                  description: Identifiant du terrain à réserver
                slotId:
                  type: integer
                  description: Identifiant du créneau horaire à réserver
              example:
                courtId: 1
                slotId: 1
      responses:
        201:
          description: Réservation créée avec succès
        400:
          description: Erreur de validation (créneau horaire non disponible)
        404:
          description: Créneau horaire non trouvé
        500:
          description: Erreur interne du serveur
    get:
      summary: Récupérer les réservations de l'utilisateur connecté
      tags: [Reservations]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Liste des réservations de l'utilisateur
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: ID de la réservation
                    courtName:
                      type: string
                      description: Nom du terrain réservé
                    slotName:
                      type: string
                      description: Nom du créneau horaire réservé
                    schedule:
                      type: string
                      format: date-time
                      description: Date et heure du créneau horaire réservé
                  example:
                    id: 1
                    courtName: "Court A"
                    slotName: "Slot 1"
                    schedule: "2024-12-10T10:00:00Z"
        401:
          description: Non autorisé (token manquant ou invalide)
        500:
          description: Erreur interne du serveur
  /reservations/{reservationId}:
    delete:
      summary: Supprimer une réservation
      tags: [Reservations]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: reservationId
          schema:
            type: integer
          required: true
          description: ID de la réservation à supprimer
      responses:
        200:
          description: Réservation supprimée avec succès
        403:
          description: Non autorisé
        404:
          description: Réservation non trouvée
        500:
          description: Erreur interne du serveur
  /courts:
    get:
      summary: Récupérer tous les terrains
      tags: [Courts]
      responses:
        200:
          description: Liste des terrains.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: ID du terrain
                    name:
                      type: string
                      description: Nom du terrain
                    status:
                      type: string
                      description: Statut du terrain
    post:
      summary: Ajouter un nouveau terrain
      tags: [Courts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Nom du terrain
                status:
                  type: string
                  description: Statut du terrain
      responses:
        201:
          description: Terrain créé avec succès.
        400:
          description: Erreur de validation.
  /courts/{id}:
    get:
      summary: Récupérer un court spécifique par son ID
      tags: [Courts]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID du court
      responses:
        200:
          description: Court trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  status:
                    type: string
        404:
          description: Court non trouvé
  /register:
    post:
      summary: Inscrire un nouvel utilisateur
      tags: [Authentification]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Nom d'utilisateur
              example:
                username: "JeanDupont"
      responses:
        201:
          description: Utilisateur inscrit avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilisateur'
        400:
          description: Erreur de validation ou utilisateur déjà existant
        500:
          description: Erreur interne du serveur
  /login:
    post:
      summary: Connecter un utilisateur existant
      tags: [Authentification]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Nom d'utilisateur
              example:
                username: "JeanDupont"
      responses:
        200:
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Token JWT pour authentifier les requêtes
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        400:
          description: Erreur de validation ou utilisateur introuvable
        500:
          description: Erreur interne du serveur
  /admin/login:
    post:
      summary: Se connecter en tant qu'admin
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pseudo
                - password
              properties:
                pseudo:
                  type: string
                  description: Pseudo de l'admin
                password:
                  type: string
                  description: Mot de passe de l'admin
              example:
                pseudo: "admin"
                password: "admin"
      responses:
        200:
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Token JWT pour authentifier les requêtes
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        400:
          description: Pseudo ou mot de passe non valide.
        500:
          description: Erreur interne du serveur
  /admin/courts/{id}:
    put:
      summary: Modifier le statut d'un terrain
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID du terrain à modifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  description: Nouveau statut du terrain
              example:
                status: "unavailable"
      responses:
        200:
          description: Statut du terrain modifié avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message de succès
              example:
                message: "Court status updated successfully"
        401:
          description: Non autorisé (token manquant ou invalide)
        404:
          description: Terrain non trouvé
        500:
          description: Erreur interne du serveur
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Identifiant unique de l'utilisateur
        username:
          type: string
          description: Nom d'utilisateur
        createdAt:
          type: string
          format: date-time
          description: Date de création de l'utilisateur
        updatedAt:
          type: string
          format: date-time
          description: Dernière mise à jour de l'utilisateur
      example:
        id: 1
        username: "JeanDupont"
        createdAt: "2024-12-01T12:00:00Z"
        updatedAt: "2024-12-01T12:00:00Z"
    Reservation:
      type: object
      properties:
        id:
          type: integer
          description: Identifiant unique de la réservation
        userId:
          type: integer
          description: Identifiant de l'utilisateur ayant effectué la réservation
        slotId:
          type: integer
          description: Identifiant du créneau horaire réservé
        createdAt:
          type: string
          format: date-time
          description: Date de création de la réservation
        updatedAt:
          type: string
          format: date-time
          description: Date de dernière mise à jour de la réservation
      example:
        id: 1
        userId: 2
        slotId: 1
        createdAt: "2024-12-01T12:00:00Z"
        updatedAt: "2024-12-01T12:00:00Z"
    Terrain:
      type: object
      properties:
        id:
          type: integer
          description: Identifiant unique du terrain
        name:
          type: string
          description: Nom du terrain
        status:
          type: string
          description: Statut du terrain
        createdAt:
          type: string
          format: date-time
          description: Date de création du terrain
        updatedAt:
          type: string
          format: date-time
          description: Dernière mise à jour du terrain
      example:
        id: 1
        name: "A"
        status: "available"
        createdAt: "2024-12-01T12:00:00Z"
        updatedAt: "2024-12-01T12:00:00Z"
    Utilisateur:
      type: object
      properties:
        id:
          type: integer
          description: Identifiant unique de l'utilisateur
        username:
          type: string
          description: Nom d'utilisateur
        createdAt:
          type: string
          format: date-time
          description: Date de création de l'utilisateur
        updatedAt:
          type: string
          format: date-time
          description: Dernière mise à jour de l'utilisateur
      example:
        id: 1
        username: "JeanDupont"
        createdAt: "2024-12-01T12:00:00Z"
        updatedAt: "2024-12-01T12:00:00Z"
